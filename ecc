#!/bin/bash

test "${BASH_SOURCE[0]}" = "$0" || {
    echo "Error: '${BASH_SOURCE[0]}' should not be sourced"
    return 1
}

set -o pipefail         # proper status code for a pipeline
set -o errexit          # -e exit when seeing a nonzero status code
set -o nounset          # -u using unbound variable is an error
shopt -s failglob       # pathname expansion failing is an error

__my_exit_trap__ () {
    local LAST_STATUS=$? LAST_COMMAND="$BASH_COMMAND"
    if [[ $LAST_STATUS != 0 ]]
    then
        printf '\nCommand `%s` has nonzero exit status.\n\n' "$LAST_COMMAND"
    fi
}
trap __my_exit_trap__ EXIT

##############################################################################

test "$#" = 1
mkdir -p "$1"
cd "$1"

##############################################################################

### Make sure you have openssl in your PATH ###

type -a openssl
openssl version

##############################################################################

### Secret key and certificate for root certificate authority ###

if [[ ! -f rootca.key ]]; then
    openssl ecparam -name prime256v1 -genkey -out rootca.key
fi

if [[ ! -f rootca.crt ]]; then
    openssl req -x509 -new -sha256 -days 60 -subj /CN=rootca/ -key rootca.key -out rootca.crt -config <(printf %s '
        [ req ]
        distinguished_name = req_distinguished_name
        x509_extensions = extension

        [ req_distinguished_name ]
        commonName = rootca

        [ extension ]
        keyUsage = critical, keyCertSign, cRLSign
        basicConstraints = critical, CA:TRUE
    ')
fi


### Secret key and certificate for intermediate certificate authority ###

if [[ ! -f intermediateca.key ]]; then
    openssl ecparam -name prime256v1 -genkey -out intermediateca.key
fi

if [[ ! -f intermediateca.crt ]]; then
    openssl req -new -sha256 -subj /CN=intermediateca/ -key intermediateca.key -out intermediateca.csr
    openssl x509 -CA rootca.crt -CAkey rootca.key -set_serial 0 -days 60 -req -in intermediateca.csr -out intermediateca.crt -extfile <(printf %s '
        keyUsage = critical, keyCertSign, cRLSign
        basicConstraints = critical, CA:TRUE, pathlen:0
    ')
    rm intermediateca.csr
fi


### Secret key and certificate for localhost ###

if [[ ! -f localhost.key ]]; then
    openssl ecparam -name prime256v1 -genkey -out localhost.key
fi

if [[ ! -f localhost.crt ]]; then
    openssl req -new -sha256 -subj /CN=localhost/ -key localhost.key -out localhost.csr
    openssl x509 -CA intermediateca.crt -CAkey intermediateca.key -set_serial 0 -days 60 -req -in localhost.csr -out localhost.crt -extfile <(printf %s '
        subjectAltName = DNS:localhost,DNS:example.com,DNS:*.example.com
    ')
    rm localhost.csr
fi


### Certificate chain for localhost ###

cat localhost.crt intermediateca.crt > localhost.crtchain
